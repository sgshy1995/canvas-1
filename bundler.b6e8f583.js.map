{"version":3,"sources":["bundler.js"],"names":["canvas","document","getElementById","ctx","getContext","width","documentElement","clientWidth","height","clientHeight","last","painting","ifInTouch","drawLine","x1","y1","x2","y2","beginPath","moveTo","lineTo","stroke","fillStyle","strokeStyle","lineWidth","lineCap","ontouchmove","e","touches","clientX","clientY","ontouchend","onmousedown","onmousemove","onmouseup"],"mappings":";AAAA,IAAIA,EAASC,SAASC,eAAe,UACjCC,EAAMH,EAAOI,WAAW,MAE5BJ,EAAOK,MAAQJ,SAASK,gBAAgBC,YACxCP,EAAOQ,OAASP,SAASK,gBAAgBG,aAEzC,IAAIC,EAAO,GACPC,GAAW,EAETC,EAAY,iBAAkBX,SA+BpC,SAASY,EAASC,EAAIC,EAAIC,EAAIC,GAC1Bd,EAAIe,YACJf,EAAIgB,OAAOL,EAAIC,GACfZ,EAAIiB,OAAOJ,EAAIC,GACfd,EAAIkB,SAjCRlB,EAAImB,UAAY,QAChBnB,EAAIoB,YAAc,QAClBpB,EAAIqB,UAAY,GAChBrB,EAAIsB,QAAU,QAETb,EAcMA,IACPZ,EAAO0B,YAAc,SAACC,GAClBd,EAASH,EAAK,GAAIA,EAAK,GAAIiB,EAAEC,QAAQ,GAAGC,QAASF,EAAEC,QAAQ,GAAGE,SAC9DpB,EAAO,CAACiB,EAAEC,QAAQ,GAAGC,QAASF,EAAEC,QAAQ,GAAGE,UAE/C9B,EAAO+B,WAAa,WAChBrB,EAAO,MAnBXV,EAAOgC,YAAc,WACjBrB,GAAW,GAEfX,EAAOiC,YAAc,SAACN,GACdhB,IACAE,EAASH,EAAK,GAAIA,EAAK,GAAIiB,EAAEE,QAASF,EAAEG,SACxCpB,EAAO,CAACiB,EAAEE,QAASF,EAAEG,WAG7B9B,EAAOkC,UAAY,WACfvB,GAAW,EACXD,EAAO","file":"bundler.b6e8f583.js","sourceRoot":"..\\src","sourcesContent":["var canvas = document.getElementById('canvas')\nvar ctx = canvas.getContext('2d')\n\ncanvas.width = document.documentElement.clientWidth\ncanvas.height = document.documentElement.clientHeight\n\nvar last = []\nvar painting = false\n\nconst ifInTouch = \"ontouchstart\" in document\n\nctx.fillStyle = 'black'\nctx.strokeStyle = 'black'\nctx.lineWidth = 20\nctx.lineCap = 'round'\n\nif (!ifInTouch) {\n    canvas.onmousedown = () => {\n        painting = true\n    }\n    canvas.onmousemove = (e) => {\n        if (painting) {\n            drawLine(last[0], last[1], e.clientX, e.clientY)\n            last = [e.clientX, e.clientY]\n        }\n    }\n    canvas.onmouseup = () => {\n        painting = false\n        last = []\n    }\n} else if (ifInTouch) {\n    canvas.ontouchmove = (e) => {\n        drawLine(last[0], last[1], e.touches[0].clientX, e.touches[0].clientY)\n        last = [e.touches[0].clientX, e.touches[0].clientY]\n    }\n    canvas.ontouchend = () => {\n        last = []\n    }\n}\n\nfunction drawLine(x1, y1, x2, y2) {\n    ctx.beginPath()\n    ctx.moveTo(x1, y1)\n    ctx.lineTo(x2, y2)\n    ctx.stroke()\n}"]}